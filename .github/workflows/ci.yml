name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort
    
    - name: Run code formatting check (Black)
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Run import sorting check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Run linting (Flake8)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics \
          --exclude=venv,.git,__pycache__,.pytest_cache,.idea,.streamlit,2025-2026,previous_seasons
      continue-on-error: true
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=term-missing --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
    
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report-${{ matrix.python-version }}
        path: htmlcov/
      if: always()
    
    - name: Test summary
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… All tests passed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
      if: success()

  lint-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Generate code quality report
      run: |
        echo "# Code Quality Report" > quality_report.md
        echo "" >> quality_report.md
        echo "## Black Formatting" >> quality_report.md
        black --check . > black_output.txt 2>&1 || true
        echo '```' >> quality_report.md
        cat black_output.txt >> quality_report.md
        echo '```' >> quality_report.md
        echo "" >> quality_report.md
        echo "## Import Sorting (isort)" >> quality_report.md
        isort --check-only --diff . > isort_output.txt 2>&1 || true
        echo '```' >> quality_report.md
        cat isort_output.txt >> quality_report.md
        echo '```' >> quality_report.md
        echo "" >> quality_report.md
        echo "## Flake8 Linting" >> quality_report.md
        flake8 . --count --statistics --exclude=venv,.git,__pycache__,.pytest_cache,.idea,.streamlit,2025-2026,previous_seasons > flake8_output.txt 2>&1 || true
        echo '```' >> quality_report.md
        cat flake8_output.txt >> quality_report.md
        echo '```' >> quality_report.md
    
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: quality_report.md
